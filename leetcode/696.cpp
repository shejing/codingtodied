/*
 *给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。

重复出现的子串要计算它们出现的次数。

示例 1 :

输入: "00110011"
输出: 6
解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。

请注意，一些重复出现的子串要计算它们出现的次数。

另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。

示例 2 :

输入: "10101"
输出: 4
解释: 有4个子串：“10”，“01”，“10”，“01”，它们具有相同数量的连续1和0。
 * */

/*
题目的意思是0011 连续的0有两个，连续的1有两个，所以这个串有相同数量的连续的0和1。
解题思路是，计算连续的1和连续的0的数目count
对于00110011，连续的count数为 [2,2,2,2]，相邻两个count必定一个为0，一个为1，它们可以组成的相同数量连续的字串数目为min(count[i], count[i-1]), 所以结果只需要将这些数累加起来就可以了。
*/
class Solution {
public:
    int countBinarySubstrings(string s) {
        int len = s.length();
        int index = 0, last = 0, count = 0, res = 0;
        while(index<len){
            char cur = s[index];
            while(index<len && s[index]==cur){
                index++;
                count++;
            }
            res += min(count,last);
            last  = count;
            count = 0;
        }
        return res;
    }
};
